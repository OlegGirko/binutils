arch i586 targets armv5tel:armv5tel armv6l:armv6l armv7l:armv7l armv7hl:armv7hl armv7nhl:armv7nhl armv7tnhl:armv7tnhl mipsel:mipsel 

cross-armv5tel-binutils-accel
  targettype x86 block!
  targettype 32bit block!
  targettype armv6l block!
  targettype armv7l block!
  targettype armv7hl block!
  targettype armv7nhl block!
  targettype armv7tnhl block!
  targettype mipsel block!

  targettype armv5tel autoreqprov off
  targettype armv5tel provides "cross-arm-binutils-accel"
  targettype armv5tel requires "glibc-x86-arm"
  targettype armv5tel requires "zlib-x86-arm"
  targettype armv5tel requires "binutils"
  targettype armv5tel prefix /emul/ia32-linux
  targettype armv5tel extension -arm
  targettype armv5tel +/
  targettype armv5tel -/usr/share/man
  targettype armv5tel -/usr/share/doc
  targettype armv5tel requires "meego-accelerator"



  targettype armv5tel post " for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv5tel post "   binary="/usr/bin/${bin}" "
  targettype armv5tel post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv5tel post "     mv ${binary} ${binary}.orig-arm && ln -s <prefix>${binary} ${binary}"
  targettype armv5tel post "   else "
  targettype armv5tel post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv5tel post "   fi "
  targettype armv5tel post " done "

  targettype armv5tel preun " for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv5tel preun "   binary="/usr/bin/${bin}" "
  targettype armv5tel preun "   if test -e ${binary}.orig-arm ; then"
  targettype armv5tel preun "     rm ${binary} && mv ${binary}.orig-arm ${binary}"
  targettype armv5tel preun "   else "
  targettype armv5tel preun "     echo "${binary}.orig-arm not present !" "
  targettype armv5tel preun "   fi "
  targettype armv5tel preun " done "


cross-armv6l-binutils-accel
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv7l block!
  targettype armv7hl block!
  targettype armv7nhl block!
  targettype armv7tnhl block!
  targettype mipsel block!

  targettype armv6l autoreqprov off
  targettype armv6l provides "cross-arm-binutils-accel"
  targettype armv6l requires "glibc-x86-arm"
  targettype armv6l requires "zlib-x86-arm"
  targettype armv6l requires "binutils"
  targettype armv6l prefix /emul/ia32-linux
  targettype armv6l extension -arm
  targettype armv6l +/
  targettype armv6l -/usr/share/man
  targettype armv6l -/usr/share/doc
  targettype armv6l requires "meego-accelerator"



  targettype armv6l post " for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv6l post "   binary="/usr/bin/${bin}" "
  targettype armv6l post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv6l post "     mv ${binary} ${binary}.orig-arm && ln -s <prefix>${binary} ${binary}"
  targettype armv6l post "   else "
  targettype armv6l post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv6l post "   fi "
  targettype armv6l post " done "

  targettype armv6l preun " for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv6l preun "   binary="/usr/bin/${bin}" "
  targettype armv6l preun "   if test -e ${binary}.orig-arm ; then"
  targettype armv6l preun "     rm ${binary} && mv ${binary}.orig-arm ${binary}"
  targettype armv6l preun "   else "
  targettype armv6l preun "     echo "${binary}.orig-arm not present !" "
  targettype armv6l preun "   fi "
  targettype armv6l preun " done "


cross-armv7l-binutils-accel
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv6l block!
  targettype armv7hl block!
  targettype armv7nhl block!
  targettype armv7tnhl block!
  targettype mipsel block!

  targettype armv7l autoreqprov off
  targettype armv7l provides "cross-arm-binutils-accel"
  targettype armv7l requires "glibc-x86-arm"
  targettype armv7l requires "zlib-x86-arm"
  targettype armv7l requires "binutils"
  targettype armv7l prefix /emul/ia32-linux
  targettype armv7l extension -arm
  targettype armv7l +/
  targettype armv7l -/usr/share/man
  targettype armv7l -/usr/share/doc
  targettype armv7l requires "meego-accelerator"



  targettype armv7l post " for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv7l post "   binary="/usr/bin/${bin}" "
  targettype armv7l post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv7l post "     mv ${binary} ${binary}.orig-arm && ln -s <prefix>${binary} ${binary}"
  targettype armv7l post "   else "
  targettype armv7l post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7l post "   fi "
  targettype armv7l post " done "

  targettype armv7l preun " for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv7l preun "   binary="/usr/bin/${bin}" "
  targettype armv7l preun "   if test -e ${binary}.orig-arm ; then"
  targettype armv7l preun "     rm ${binary} && mv ${binary}.orig-arm ${binary}"
  targettype armv7l preun "   else "
  targettype armv7l preun "     echo "${binary}.orig-arm not present !" "
  targettype armv7l preun "   fi "
  targettype armv7l preun " done "


cross-armv7hl-binutils-accel
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv6l block!
  targettype armv7l block!
  targettype armv7nhl block!
  targettype armv7tnhl block!
  targettype mipsel block!

  targettype armv7hl autoreqprov off
  targettype armv7hl provides "cross-arm-binutils-accel"
  targettype armv7hl requires "glibc-x86-arm"
  targettype armv7hl requires "zlib-x86-arm"
  targettype armv7hl requires "binutils"
  targettype armv7hl prefix /emul/ia32-linux
  targettype armv7hl extension -arm
  targettype armv7hl +/
  targettype armv7hl -/usr/share/man
  targettype armv7hl -/usr/share/doc
  targettype armv7hl requires "meego-accelerator"



  targettype armv7hl post " for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv7hl post "   binary="/usr/bin/${bin}" "
  targettype armv7hl post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv7hl post "     mv ${binary} ${binary}.orig-arm && ln -s <prefix>${binary} ${binary}"
  targettype armv7hl post "   else "
  targettype armv7hl post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7hl post "   fi "
  targettype armv7hl post " done "

  targettype armv7hl preun " for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv7hl preun "   binary="/usr/bin/${bin}" "
  targettype armv7hl preun "   if test -e ${binary}.orig-arm ; then"
  targettype armv7hl preun "     rm ${binary} && mv ${binary}.orig-arm ${binary}"
  targettype armv7hl preun "   else "
  targettype armv7hl preun "     echo "${binary}.orig-arm not present !" "
  targettype armv7hl preun "   fi "
  targettype armv7hl preun " done "


cross-armv7nhl-binutils-accel
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv6l block!
  targettype armv7l block!
  targettype armv7hl block!
  targettype armv7tnhl block!
  targettype mipsel block!

  targettype armv7nhl autoreqprov off
  targettype armv7nhl provides "cross-arm-binutils-accel"
  targettype armv7nhl requires "glibc-x86-arm"
  targettype armv7nhl requires "zlib-x86-arm"
  targettype armv7nhl requires "binutils"
  targettype armv7nhl prefix /emul/ia32-linux
  targettype armv7nhl extension -arm
  targettype armv7nhl +/
  targettype armv7nhl -/usr/share/man
  targettype armv7nhl -/usr/share/doc
  targettype armv7nhl requires "meego-accelerator"



  targettype armv7nhl post " for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv7nhl post "   binary="/usr/bin/${bin}" "
  targettype armv7nhl post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv7nhl post "     mv ${binary} ${binary}.orig-arm && ln -s <prefix>${binary} ${binary}"
  targettype armv7nhl post "   else "
  targettype armv7nhl post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7nhl post "   fi "
  targettype armv7nhl post " done "

  targettype armv7nhl preun " for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv7nhl preun "   binary="/usr/bin/${bin}" "
  targettype armv7nhl preun "   if test -e ${binary}.orig-arm ; then"
  targettype armv7nhl preun "     rm ${binary} && mv ${binary}.orig-arm ${binary}"
  targettype armv7nhl preun "   else "
  targettype armv7nhl preun "     echo "${binary}.orig-arm not present !" "
  targettype armv7nhl preun "   fi "
  targettype armv7nhl preun " done "


cross-armv7tnhl-binutils-accel
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv6l block!
  targettype armv7l block!
  targettype armv7hl block!
  targettype armv7nhl block!
  targettype mipsel block!

  targettype armv7tnhl autoreqprov off
  targettype armv7tnhl provides "cross-arm-binutils-accel"
  targettype armv7tnhl requires "glibc-x86-arm"
  targettype armv7tnhl requires "zlib-x86-arm"
  targettype armv7tnhl requires "binutils"
  targettype armv7tnhl prefix /emul/ia32-linux
  targettype armv7tnhl extension -arm
  targettype armv7tnhl +/
  targettype armv7tnhl -/usr/share/man
  targettype armv7tnhl -/usr/share/doc
  targettype armv7tnhl requires "meego-accelerator"



  targettype armv7tnhl post " for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv7tnhl post "   binary="/usr/bin/${bin}" "
  targettype armv7tnhl post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv7tnhl post "     mv ${binary} ${binary}.orig-arm && ln -s <prefix>${binary} ${binary}"
  targettype armv7tnhl post "   else "
  targettype armv7tnhl post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7tnhl post "   fi "
  targettype armv7tnhl post " done "

  targettype armv7tnhl preun " for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv7tnhl preun "   binary="/usr/bin/${bin}" "
  targettype armv7tnhl preun "   if test -e ${binary}.orig-arm ; then"
  targettype armv7tnhl preun "     rm ${binary} && mv ${binary}.orig-arm ${binary}"
  targettype armv7tnhl preun "   else "
  targettype armv7tnhl preun "     echo "${binary}.orig-arm not present !" "
  targettype armv7tnhl preun "   fi "
  targettype armv7tnhl preun " done "


cross-mipsel-binutils-accel
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv6l block!
  targettype armv7l block!
  targettype armv7hl block!
  targettype armv7nhl block!
  targettype armv7tnhl block!

  targettype mipsel autoreqprov off
  targettype mipsel provides "cross-arm-binutils-accel"
  targettype mipsel requires "glibc-x86-arm"
  targettype mipsel requires "zlib-x86-arm"
  targettype mipsel requires "binutils"
  targettype mipsel prefix /emul/ia32-linux
  targettype mipsel extension -arm
  targettype mipsel +/
  targettype mipsel -/usr/share/man
  targettype mipsel -/usr/share/doc
  targettype mipsel requires "meego-accelerator"



  targettype mipsel post " for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype mipsel post "   binary="/usr/bin/${bin}" "
  targettype mipsel post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype mipsel post "     mv ${binary} ${binary}.orig-arm && ln -s <prefix>${binary} ${binary}"
  targettype mipsel post "   else "
  targettype mipsel post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype mipsel post "   fi "
  targettype mipsel post " done "

  targettype mipsel preun " for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype mipsel preun "   binary="/usr/bin/${bin}" "
  targettype mipsel preun "   if test -e ${binary}.orig-arm ; then"
  targettype mipsel preun "     rm ${binary} && mv ${binary}.orig-arm ${binary}"
  targettype mipsel preun "   else "
  targettype mipsel preun "     echo "${binary}.orig-arm not present !" "
  targettype mipsel preun "   fi "
  targettype mipsel preun " done "

